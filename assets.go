// Code generated by go-bindata.
// sources:
// templates/default.nix
// templates/deps.nix
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDefaultNix = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x52\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\x10\xee\x8e\xb5\xec\x05\x58\x07\xa4\xd8\x65\x08\xba\xed\xb2\x06\x45\xd7\x4b\x91\x03\x6d\x31\x92\x10\x5b\x32\x24\xd9\xfb\x08\xf2\xdf\x47\xf9\x63\x73\x0f\x02\x9e\xc8\xc7\xf7\x48\x82\x37\xf0\xac\x4d\x80\x93\x69\x08\x7e\x62\x00\x45\x96\x3c\x46\x92\x50\xfd\x06\x1d\x63\x17\x76\x45\xa1\x4c\xd4\x7d\x25\x6a\xd7\x16\x67\x6c\x4d\x53\xeb\xb6\x50\x6e\x6b\xcd\x2f\x18\x5e\x5f\x41\xbc\x90\x0f\xc6\x59\x38\x1e\x37\x17\x08\x51\x92\x1d\x6e\xa1\xea\x4d\x23\xbf\xb8\x03\xd6\x67\x54\x74\x0b\x27\x8a\xb5\x66\xa5\x19\x69\x35\x83\xea\x8f\x9f\x51\x18\x2c\x5c\x77\x9b\xcd\xdb\x4a\xf0\x54\xc3\x65\x03\x60\xb1\x25\xf8\x04\x59\x72\x3c\x9c\x95\xf8\x9e\xfe\xc7\x63\xfe\xee\x32\x4c\xfe\xd7\xec\x9e\x69\xf3\x67\xcd\xfc\xd1\x49\x1e\x69\xcf\x4f\x3c\x38\xdf\x62\x84\x6c\x5b\x96\x77\xe5\xfb\x72\x9b\x4d\x0a\x53\xd3\xa2\x31\x95\x08\xd1\x1b\xab\x82\x08\x7d\x35\x41\x28\xe1\x23\x37\x31\x4c\xf2\x0c\xd6\xd2\x4f\x34\x98\x79\x76\x4e\x73\x9e\x13\xe6\x04\x96\x40\x7c\x4e\x63\x3c\xa3\x0a\x90\x25\x17\xce\x8d\x83\x3d\x34\x29\xc4\x12\x79\x1e\x13\x4a\x4a\xff\xa9\xa3\xcc\xa8\x42\x56\x42\x3e\x96\xa9\x65\x15\x07\x8c\x7a\x6d\xfe\xad\xed\x9c\x8f\x63\x74\xb1\x0f\xbe\x66\xc6\xb2\xeb\x71\x6f\x00\xc6\x6a\xf2\xfc\xe3\xde\xef\xc7\x40\xef\x9b\xb5\xce\x4b\x1d\x9e\xa8\x73\x8b\x39\xab\x68\xdc\x7e\xb8\x5b\x53\xbe\x62\xd0\x4b\xfe\x3a\x3a\x29\xb7\xa7\x2e\x0d\x22\x0a\xc9\x40\xf0\x35\x8c\x71\xbe\xa8\xc7\xfd\xe3\x0e\x50\x4a\x68\x29\x22\xaf\x1e\xff\x5d\x12\x93\x5c\x10\xce\xab\x84\xba\xb3\x0a\x45\x8b\xb6\xc7\xa6\xb8\x09\x54\xe7\x21\xa2\x95\xe8\x65\x9e\xea\x72\x8c\xbc\xfe\xaa\x8f\x14\x58\x35\x45\xd8\xeb\x32\xd9\x5f\x37\x7f\x03\x00\x00\xff\xff\x5d\x30\x7b\x2e\xb8\x02\x00\x00")

func templatesDefaultNixBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultNix,
		"templates/default.nix",
	)
}

func templatesDefaultNix() (*asset, error) {
	bytes, err := templatesDefaultNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.nix", size: 696, mode: os.FileMode(420), modTime: time.Unix(1481495165, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDepsNix = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8f\x31\x4b\x43\x31\x14\x46\xf7\xf7\x2b\x3e\xea\x6c\x02\x05\x1d\x14\x37\xd1\xb5\x68\x75\x09\x19\x6e\xd3\xdb\x24\xf4\xbd\xe4\x91\xa4\xd5\x22\xfd\xef\xbe\xb4\xb4\x34\x43\x08\x9c\x73\xbe\xe1\xde\x61\xe9\x7c\xc6\xc6\xf7\x8c\x1f\xca\xb0\x1c\x38\x51\xe1\x35\x56\x07\xb8\x52\xc6\xfc\x24\xa5\xf5\xc5\xed\x56\xc2\xc4\x41\x6e\x69\xf0\xbd\x71\x83\xb4\x71\x1e\xfc\x2f\xf6\x4a\x41\x7c\x73\xca\x3e\x06\x68\xdd\xa9\x4e\xa9\x7b\x24\x0a\x96\x21\x5e\x79\xcc\x15\x02\x7f\xd3\x03\x6c\x5c\x90\xd9\x92\xe5\x05\x15\x87\x17\xcc\xea\xf8\xbd\x81\x5a\xcf\x9e\x4f\xed\x86\x8b\xa9\xcd\x79\x09\x94\xc3\xc8\x97\xc9\x5b\x75\x62\x59\xc9\xb5\x07\x76\xa9\x6f\x83\xaf\x09\xdc\xf8\xc4\xfb\xd6\x7f\x4c\xe0\xc6\x67\x47\xf3\x87\xc7\x36\xf9\x3c\xb3\x6b\x75\xac\xdf\xf1\x74\x23\x87\x75\xbd\x4d\x77\xff\x01\x00\x00\xff\xff\x39\x73\x16\x2a\x43\x01\x00\x00")

func templatesDepsNixBytes() ([]byte, error) {
	return bindataRead(
		_templatesDepsNix,
		"templates/deps.nix",
	)
}

func templatesDepsNix() (*asset, error) {
	bytes, err := templatesDepsNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/deps.nix", size: 323, mode: os.FileMode(420), modTime: time.Unix(1481495958, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/default.nix": templatesDefaultNix,
	"templates/deps.nix": templatesDepsNix,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"default.nix": &bintree{templatesDefaultNix, map[string]*bintree{}},
		"deps.nix": &bintree{templatesDepsNix, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

